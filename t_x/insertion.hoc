load_file("subiter.hoc")

proc insertion() {
  subsets()
  biophys_inhomo()
  fprint("time : ")
  print($1)
  printf("temperature_cat(0) : ") print(soma.temperature_cat(0))
  printf("temperature_cat(0.5) : ") print(soma.temperature_cat(0.5))
  printf("\n")
}

objref all, soma_branche
proc subsets() { local i
  objref all, soma_branche
  all = new SectionList()
    soma all.append()

  soma_branche = new SectionList()
  soma soma_branche.append()
}

objref branche_x
proc biophys_inhomo() {
  branche_x = new SubsetDomainIterator(soma_branche, 0, 1, 1)
  cm_branche_x()
}

proc cm_branche_x() {local x, p, p0, p1
  branche_x.update()
  p0 = branche_x.p0  p1 = branche_x.p1
  
  for branche_x.loop() {
    x = branche_x.x  p = branche_x.p
    temperature_cat(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    temperature_can(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    temperature_cagk(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    temperature_cal(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    temperature_KahpM95(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    temperature_kap(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    temperature_kd(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    temperature_kd(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    temperature_km(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    temperature_na3(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    //temperature_nax(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
    temperature_hd(x) = Temp_base + Temp_chauffage*exp(-((Centre - p)/sigma)^2)*exp(-((t-tstop/2)/sigma_t)^2)
  }
}


access soma
